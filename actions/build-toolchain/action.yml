name: Build toolchain

inputs:
  arch:
    description: "Target architecture (e.g. aarch64, x86_64)"
    default: 'aarch64'
  platform:
    description: "Target platform (e.g. w64-mingw32, pc-cygwin)"
    default: 'w64-mingw32'
  crt:
    description: "C runtime library to use (e.g. msvcrt, ucrt)"
    default: 'msvcrt'
  pack-toolchain:
    description: "Package the toolchain as an archive"
    default: false
  binutils-branch:
    description: 'Binutils branch to build'
    default: 'woarm64'
  gcc-branch:
    description: 'GCC branch to build'
    default: 'woarm64'
  mingw-branch:
    description: 'MinGW branch to build'
    default: 'woarm64'
  cygwin-branch:
    description: 'Cygwin branch to build'
    default: 'woarm64'
  cygwin-packages-branch:
    description: 'Cygwin packages branch to build'
    default: 'main'
  cocom-branch:
    description: 'COCOM branch to build'
    default: 'master'
outputs:
  toolchain-package-name:
    value: ${{ steps.set-outputs.outputs.toolchain-package-name }}
  toolchain-artifact-name:
    value: ${{ steps.set-outputs.outputs.toolchain-artifact-name }}
  runtime-package-name:
    value: ${{ steps.set-outputs.outputs.runtime-package-name }}
  runtime-artifact-name:
    value: ${{ steps.set-outputs.outputs.runtime-artifact-name }}
  toolchain-cache-key:
    value: ${{ steps.set-outputs.outputs.toolchain-cache-key }}
  runtime-cache-key:
    value: ${{ steps.set-outputs.outputs.runtime-cache-key }}
  aarch64-w64-mingw32-msvcrt-toolchain-cache-key:
    value: ${{ steps.set-outputs.outputs.aarch64-w64-mingw32-msvcrt-toolchain-cache-key }}
  aarch64-pc-cygwin-msvcrt-toolchain-cache-key:
    value: ${{ steps.set-outputs.outputs.aarch64-pc-cygwin-msvcrt-toolchain-cache-key }}
  aarch64-w64-mingw32-msvcrt-runtime-cache-key:
    value: ${{ steps.set-outputs.outputs.aarch64-w64-mingw32-msvcrt-runtime-cache-key }}
  aarch64-pc-cygwin-msvcrt-runtime-cache-key:
    value: ${{ steps.set-outputs.outputs.aarch64-pc-cygwin-msvcrt-runtime-cache-key }}

runs:
  using: composite

  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: ${{ github.workspace }}
        fetch-depth: 0

    - name: Set environment
      shell: bash
      env:
        ARCH: ${{ inputs.arch }}
        PLATFORM: ${{ inputs.platform }}
        CRT: ${{ inputs.crt }}
        BINUTILS_BRANCH: ${{ inputs.binutils-branch }}
        GCC_BRANCH: ${{ inputs.gcc-branch }}
        MINGW_BRANCH: ${{ inputs.mingw-branch }}
        CYGWIN_BRANCH: ${{ inputs.cygwin-branch }}
        CYGWIN_PACKAGES_BRANCH: ${{ inputs.cygwin-packages-branch }}
        COCOM_BRANCH: ${{ inputs.cocom-branch }}
        ROOT_PATH: ${{ github.workspace }}
        TOOLCHAIN_PATH: ${{ github.workspace }}/cross
        RELATIVE_ARTIFACT_PATH: ./artifact
        CCACHE: 1
        DELETE_BUILD: 1
        PACK_TOOLCHAIN: ${{ inputs.pack-toolchain }}
      run: |
        .github/scripts/config-yml.sh

    - name: Get cache keys
      id: cache-keys
      shell: bash
      run: |
        .github/scripts/get-cache-keys.sh

    - name: Cache toolchain
      id: cache-toolchain
      uses: actions/cache@v4
      with:
        path: ${{ env.RELATIVE_ARTIFACT_PATH }}/${{ env.TOOLCHAIN_PACKAGE_NAME }}
        key: ${{ steps.cache-keys.outputs.toolchain-cache-key }}
        enableCrossOsArchive: true

    - name: Cache runtime
      id: cache-runtime
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      uses: actions/cache@v4
      with:
        path: ${{ env.RELATIVE_ARTIFACT_PATH }}/${{ env.RUNTIME_PACKAGE_NAME }}
        key: ${{ steps.cache-keys.outputs.runtime-cache-key }}
        enableCrossOsArchive: true

    - name: Checkout binutils
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BINUTILS_REPO }}
        ref: ${{ env.BINUTILS_BRANCH }}
        path: ${{ env.SOURCE_PATH }}/binutils

    - name: Checkout GCC
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ env.GCC_REPO }}
        ref: ${{ env.GCC_BRANCH }}
        path: ${{ env.SOURCE_PATH }}/gcc

    - name: Checkout MinGW
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM != 'pc-linux-gnu' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ env.MINGW_REPO }}
        ref: ${{ env.MINGW_BRANCH }}
        path: ${{ env.SOURCE_PATH }}/mingw

    - name: Checkout Cygwin
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM == 'pc-cygwin' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ env.CYGWIN_REPO }}
        ref: ${{ env.CYGWIN_BRANCH }}
        path: ${{ env.SOURCE_PATH }}/cygwin

    - name: Checkout Cygwin packages
      if: ${{ false && steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM == 'pc-cygwin' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ env.CYGWIN_PACKAGES_REPO }}
        ref: ${{ env.CYGWIN_PACKAGES_BRANCH }}
        submodules: 'recursive'
        path: ${{ env.SOURCE_PATH }}/cygwin-packages

    - name: Checkout COCOM
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM == 'pc-cygwin' }}
      shell: bash
      run: |
        cd ${{ env.SOURCE_PATH }}
        git clone ${{ env.COCOM_REPO }} -b ${{ env.COCOM_BRANCH }} cocom

    - name: Install dependencies
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        .github/scripts/install-dependencies.sh

    - name: Install libraries
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        .github/scripts/install-libraries.sh

    - name: Restore Ccache
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.CCACHE_DIR_PATH }}
        key: ${{ steps.cache-keys.outputs.ccache-key }}
        restore-keys: ${{ steps.cache-keys.outputs.ccache-restore-keys }}

    - name: Build binutils
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      env:
        # Don't delete build files, they're needed for running binutils tests in the next step.
        DELETE_BUILD: 0
      shell: bash
      run: |
        .github/scripts/binutils/build.sh

    - name: Execute binutils tests
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        .github/scripts/toolchain/execute-binutils-tests.sh

    - name: Delete binutils build files
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.DELETE_BUILD == 1 }}
      shell: bash
      run: |
        .github/scripts/binutils/delete-build.sh

    - name: Install cross headers and libraries
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM == 'pc-linux-gnu' }}
      shell: bash
      run: |
        .github/scripts/toolchain/install-cross-headers-libs.sh

    - name: Build MinGW headers
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM != 'pc-linux-gnu' }}
      shell: bash
      run: |
        .github/scripts/toolchain/build-mingw-headers.sh

    - name: Install Cygwin headers
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM == 'pc-cygwin' }}
      shell: bash
      run: |
        .github/scripts/toolchain/install-cygwin-headers.sh

    - name: Build GCC stage1
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM != 'pc-linux-gnu' }}
      shell: bash
      run: |
        .github/scripts/toolchain/build-gcc-stage1.sh

    - name: Build MinGW CRT
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM != 'pc-linux-gnu' }}
      shell: bash
      run: |
        .github/scripts/toolchain/build-mingw-crt.sh

    - name: Build MinGW winpthreads
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM == 'w64-mingw32' }}
      shell: bash
      run: |
        .github/scripts/toolchain/build-mingw-winpthreads.sh

    - name: Build COCOM
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM == 'pc-cygwin' }}
      shell: bash
      run: |
        .github/scripts/toolchain/build-cocom.sh

    - name: Build Cygwin stage1
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM == 'pc-cygwin' }}
      shell: bash
      run: |
        .github/scripts/toolchain/build-cygwin.sh 1

    - name: Build GCC stage2
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        .github/scripts/toolchain/build-gcc.sh

    - name: Build MinGW
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM == 'w64-mingw32' }}
      shell: bash
      run: |
        .github/scripts/toolchain/build-mingw.sh

    - name: Build Cygwin stage2
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM == 'pc-cygwin' }}
      shell: bash
      run: |
        .github/scripts/toolchain/build-cygwin.sh 2

    - name: Save Ccache
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && always() }}
      uses: actions/cache/save@v4
      with:
        path: ${{ env.CCACHE_DIR_PATH }}
        key: ${{ steps.cache-keys.outputs.ccache-key }}

    - name: Strip host binaries
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PLATFORM != 'pc-linux-gnu' }}
      shell: bash
      run: |
        .github/scripts/strip-host-binaries.sh

    - name: Pack toolchain
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        .github/scripts/toolchain/pack.sh

    - name: Pack runtime
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PACK_TOOLCHAIN == 'true' }}
      shell: bash
      run: |
        .github/scripts/toolchain/pack-runtime.sh

    - name: Upload build folder
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BUILD_ARTIFACT_NAME }}
        retention-days: 1
        path: ${{ env.BUILD_PATH }}

    - name: Upload toolchain artifact
      if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PACK_TOOLCHAIN == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.TOOLCHAIN_ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_PATH }}/${{ env.TOOLCHAIN_PACKAGE_NAME }}
        retention-days: 3

    - name: Upload runtime artifact
      if: ${{ steps.cache-runtime.outputs.cache-hit != 'true' && env.PACK_TOOLCHAIN == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.RUNTIME_ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_PATH }}/${{ env.RUNTIME_PACKAGE_NAME }}
        retention-days: 3

    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        echo "toolchain-package-name=${{ env.PACK_TOOLCHAIN == 'true' && env.TOOLCHAIN_PACKAGE_NAME || '' }}" >> $GITHUB_OUTPUT
        echo "toolchain-artifact-name=${{ env.PACK_TOOLCHAIN == 'true' && env.TOOLCHAIN_ARTIFACT_NAME || '' }}" >> $GITHUB_OUTPUT
        echo "runtime-package-name=${{ env.PACK_TOOLCHAIN == 'true' && env.RUNTIME_PACKAGE_NAME || '' }}" >> $GITHUB_OUTPUT
        echo "runtime-artifact-name=${{ env.PACK_TOOLCHAIN == 'true' && env.RUNTIME_ARTIFACT_NAME || '' }}" >> $GITHUB_OUTPUT
        echo "toolchain-cache-key=${{ env.PACK_TOOLCHAIN == 'true' && steps.cache-keys.outputs.toolchain-cache-key || '' }}" >> $GITHUB_OUTPUT
        echo "aarch64-w64-mingw32-msvcrt-toolchain-cache-key=${{ env.aarch64-w64-mingw32-msvcrt-toolchain-cache-key }}" >> $GITHUB_OUTPUT
        echo "aarch64-pc-cygwin-msvcrt-toolchain-cache-key=${{ env.aarch64-pc-cygwin-msvcrt-toolchain-cache-key }}" >> $GITHUB_OUTPUT
        echo "runtime-cache-key=${{ env.PACK_TOOLCHAIN == 'true' && steps.cache-keys.outputs.runtime-cache-key || '' }}" >> $GITHUB_OUTPUT
        echo "aarch64-w64-mingw32-msvcrt-runtime-cache-key=${{ env.aarch64-w64-mingw32-msvcrt-runtime-cache-key }}" >> $GITHUB_OUTPUT
        echo "aarch64-pc-cygwin-msvcrt-runtime-cache-key=${{ env.aarch64-pc-cygwin-msvcrt-runtime-cache-key }}" >> $GITHUB_OUTPUT
